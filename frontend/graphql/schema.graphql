schema {
  query: QueryRoot
  mutation: MutationRoot
}

# Directs the executor to query only when the field exists.
directive @ifdef on FIELD

type Article {
  id: ObjectId!
  userId: ObjectId!
  subject: String!
  slug: String!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  published: Boolean!
}

input ArticleNew {
  userId: ObjectId!
  subject: String!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

scalar DateTime

type MutationRoot {
  userRegister(userNew: UserNew!): User!
  userChangePassword(pwdCur: String!, pwdNew: String!, token: String!): User!
  userUpdateProfile(userNew: UserNew!, token: String!): User!
  articleNew(articleNew: ArticleNew!): Article!
}

scalar ObjectId

type QueryRoot {
  getUserByEmail(email: String!): User!
  getUserByUsername(username: String!): User!
  userSignIn(unknownUser: UserNew!): SignInfo!
  usersList(token: String!): [User!]!
  articlesList: [Article!]!
  articlesByUser(userId: ObjectId!): [Article!]!
}

type SignInfo {
  email: String!
  username: String!
  token: String!
}

type User {
  id: ObjectId!
  email: String!
  username: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  banned: Boolean!
  articles: [Article!]!
}

input UserNew {
  email: String!
  username: String!
  cred: String!
}
