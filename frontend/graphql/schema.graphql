schema {
  query: QueryRoot
  mutation: MutationRoot
}

# Directs the executor to query only when the field exists.
directive @ifdef on FIELD

type Article {
  id: ObjectId!
  userId: ObjectId!
  subject: String!
  categoryId: ObjectId!
  summary: String!
  slug: String!
  uri: String!
  content: String!
  published: Boolean!
  top: Boolean!
  recommended: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  category: Category!
  topics: [Topic!]!
}

input ArticleNew {
  userId: ObjectId!
  subject: String!
  categoryId: ObjectId!
  summary: String!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Category {
  id: ObjectId!
  name: String!
  description: String!
  slug: String!
  uri: String!
  articles: [Article!]!
}

input CategoryNew {
  name: String!
  description: String!
}

type CategoryUser {
  id: ObjectId!
  userId: ObjectId!
  categoryId: ObjectId!
}

input CategoryUserNew {
  userId: ObjectId!
  categoryId: ObjectId!
}

scalar DateTime

type MutationRoot {
  userRegister(userNew: UserNew!): User!
  userChangePassword(pwdCur: String!, pwdNew: String!, token: String!): User!
  userUpdateProfile(userNew: UserNew!, token: String!): User!
  articleNew(articleNew: ArticleNew!): Article!
  categoryNew(categoryNew: CategoryNew!): Category!
  categoryUserNew(categoryUserNew: CategoryUserNew!): CategoryUser!
  topicNew(topicNew: TopicNew!): Topic!
  topicArticleNew(topicArticleNew: TopicArticleNew!): TopicArticle!
}

scalar ObjectId

type QueryRoot {
  userById(id: ObjectId!): User!
  userByEmail(email: String!): User!
  userByUsername(username: String!): User!
  userSignIn(signature: String!, password: String!): SignInfo!
  users(token: String!): [User!]!
  articles(published: Int!): [Article!]!
  articlesInPosition(
    username: String!
    position: String!
    limit: Int!
  ): [Article!]!
  articlesByUserId(userId: ObjectId!, published: Int!): [Article!]!
  articlesByUsername(username: String!, published: Int!): [Article!]!
  articlesByCategoryId(categoryId: ObjectId!, published: Int!): [Article!]!
  articleBySlug(username: String!, slug: String!): Article!
  categories: [Category!]!
  categoriesByUserId(userId: ObjectId!): [Category!]!
  categoriesByUsername(username: String!): [Category!]!
  categoryById(id: ObjectId!): Category!
  categoryBySlug(slug: String!): Category!
  topicsByArticleId(articleId: ObjectId!): [Topic!]!
}

type SignInfo {
  email: String!
  username: String!
  token: String!
}

type Topic {
  id: ObjectId!
  name: String!
  slug: String!
  uri: String!
}

type TopicArticle {
  id: ObjectId!
  articleId: ObjectId!
  topicId: ObjectId!
}

input TopicArticleNew {
  articleId: ObjectId!
  topicId: ObjectId!
}

input TopicNew {
  name: String!
}

type User {
  id: ObjectId!
  email: String!
  username: String!
  nickname: String!
  blogName: String!
  website: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  banned: Boolean!
  introduction: String!
  articles(published: Int!): [Article!]!
}

input UserNew {
  email: String!
  username: String!
  nickname: String!
  cred: String!
  blogName: String!
  website: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  introduction: String!
}
