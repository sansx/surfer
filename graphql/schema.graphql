schema {
  query: QueryRoot
  mutation: MutationRoot
}

# Directs the executor to query only when the field exists.
directive @ifdef on FIELD

type Article {
  id: ObjectId!
  userId: ObjectId!
  subject: String!
  website: String!
}

type MutationRoot {
  userRegister(newUser: NewUser!): User!
  userChangePassword(
    curPassword: String!
    newPassword: String!
    token: String!
  ): User!
  userUpdateProfile(newUser: NewUser!, token: String!): User!
  addArticle(newArticle: NewArticle!): Article!
}

input NewArticle {
  userId: ObjectId!
  subject: String!
  website: String!
}

input NewUser {
  email: String!
  username: String!
  cred: String!
}

scalar ObjectId

type QueryRoot {
  getUserByEmail(email: String!): User!
  getUserByUsername(username: String!): User!
  userSignIn(unknownUser: NewUser!): SignInfo!
  allUsers(token: String!): [User!]!
  allArticles: [Article!]!
  allArticlesByUser(userId: ObjectId!): [Article!]!
}

type SignInfo {
  email: String!
  username: String!
  token: String!
}

type User {
  id: ObjectId!
  email: String!
  username: String!
  articles: [Article!]!
}
